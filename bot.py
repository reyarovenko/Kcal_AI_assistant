import json
import os
from datetime import datetime, date
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import utils
from gpt_agent import estimate_kbju, is_meal_description
from storage import save_entry, format_summary_table, data_file, get_summary_for_period
from utils import MESSAGES

load_dotenv()

user_languages = {}
user_meal_stage = {}
user_delete_stage = {}

MEAL_CHOICES = {
    "uk": ["–°–Ω—ñ–¥–∞–Ω–æ–∫", "–û–±—ñ–¥", "–í–µ—á–µ—Ä—è", "–ü–µ—Ä–µ–∫—É—Å"],
    "en": ["Breakfast", "Lunch", "Dinner", "Snack"]
}


def get_entries_for_period(start_date, end_date):
    try:
        with open(data_file, "r", encoding="utf-8") as f:
            data = json.load(f)
    except FileNotFoundError:
        return []
    result = []
    for entry in data:
        entry_date = datetime.strptime(entry["date"], "%Y-%m-%d").date()
        if start_date <= entry_date <= end_date:
            result.append(entry)
    return result


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")], [KeyboardButton("üá¨üáß English")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("‚¨áÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose language:", reply_markup=reply_markup)


async def choose_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")], [KeyboardButton("üá¨üáß English")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose language:", reply_markup=reply_markup)


async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" in text:
        user_languages[user_id] = "uk"
        await update.message.reply_text("‚úÖ –ú–æ–≤—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞")
        await update.message.reply_text(MESSAGES["uk"]["start"])
        await show_main_menu(update, context)
    elif "English" in text:
        user_languages[user_id] = "en"
        await update.message.reply_text("‚úÖ Language set to: English")
        await update.message.reply_text(MESSAGES["en"]["start"])
        await show_main_menu(update, context)


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in user_languages:
        await start(update, context)
        return

    lang = user_languages[user_id]

    if lang == "uk":
        keyboard = [
            ["‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–π–æ–º —ó–∂—ñ", "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–∏–π–æ–º —ó–∂—ñ"],
            ["üìä –ü—ñ–¥—Å—É–º–æ–∫ –∑–∞ –¥–µ–Ω—å"],
            ["üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É"]
        ]
        prompt = "üìã –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    else:
        keyboard = [
            ["‚ûï Add a meal", "üóëÔ∏è Delete a meal"],
            ["üìä Summary for today"],
            ["üåê Change language"]
        ]
        prompt = "üìã Choose an action:"

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text(prompt, reply_markup=reply_markup)


async def add_meal_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in user_languages:
        await start(update, context)
        return

    lang = user_languages[user_id]

    user_meal_stage[user_id] = {"lang": lang, "awaiting_meal_type": True}

    keyboard = [[m] for m in MEAL_CHOICES[lang]]
    back_button = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == "uk" else "‚¨ÖÔ∏è Back"
    keyboard.append([back_button])

    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "üçΩ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–π–æ–º —ó–∂—ñ:" if lang == "uk" else "üçΩ Choose your meal:",
        reply_markup=reply_markup
    )


async def delete_meal_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in user_languages:
        await start(update, context)
        return

    lang = user_languages[user_id]

    user_delete_stage[user_id] = {"lang": lang, "awaiting_meal_type": True}

    keyboard = [[m] for m in MEAL_CHOICES[lang]]
    back_button = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == "uk" else "‚¨ÖÔ∏è Back"
    keyboard.append([back_button])

    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "üóëÔ∏è –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–∏–π–æ–º—É —ó–∂—ñ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:" if lang == "uk"
        else "üóëÔ∏è Choose meal type to delete:",
        reply_markup=reply_markup
    )


def get_entries_by_meal_type(meal_type, target_date=None):
    if target_date is None:
        target_date = date.today()

    try:
        with open(data_file, "r", encoding="utf-8") as f:
            data = json.load(f)
    except FileNotFoundError:
        return []

    result = []
    for i, entry in enumerate(data):
        entry_date = datetime.strptime(entry["date"], "%Y-%m-%d").date()
        if (entry_date == target_date and
                entry["description"].startswith(meal_type + ":")):
            result.append({"entry": entry, "index": i})

    return result


async def show_meal_entries_for_delete(update: Update, context: ContextTypes.DEFAULT_TYPE, meal_type: str):
    user_id = update.effective_user.id
    lang = user_languages[user_id]

    entries_with_index = get_entries_by_meal_type(meal_type)

    if not entries_with_index:
        await update.message.reply_text(
            f"–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ —Ç–∏–ø—É '{meal_type}' –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ." if lang == "uk"
            else f"No '{meal_type}' entries found for today."
        )
        await show_main_menu(update, context)
        return

    keyboard = []
    for i, item in enumerate(entries_with_index):
        entry = item["entry"]
        description = entry['description'].replace(f"{meal_type}: ", "")
        short_desc = description[:25] + "..." if len(description) > 25 else description
        keyboard.append([f"üóëÔ∏è {i + 1}. {short_desc}"])

    back_button = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == "uk" else "‚¨ÖÔ∏è Back"
    keyboard.append([back_button])

    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    user_delete_stage[user_id] = {
        "lang": lang,
        "meal_type": meal_type,
        "entries": entries_with_index,
        "awaiting_entry_selection": True
    }

    await update.message.reply_text(
        f"üóëÔ∏è –û–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Å '{meal_type}' –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:" if lang == "uk"
        else f"üóëÔ∏è Select '{meal_type}' entry to delete:",
        reply_markup=reply_markup
    )


def delete_entry_by_index(index):
    try:
        with open(data_file, "r", encoding="utf-8") as f:
            data = json.load(f)
    except FileNotFoundError:
        return None

    if 0 <= index < len(data):
        deleted_entry = data.pop(index)

        with open(data_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        return deleted_entry
    return None


async def handle_meal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_input = update.message.text.strip()

    if user_id not in user_languages:
        await start(update, context)
        return

    lang = user_languages[user_id]

    # Handle back button first
    if user_input in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è Back"]:
        if user_id in user_meal_stage:
            del user_meal_stage[user_id]
        if user_id in user_delete_stage:
            del user_delete_stage[user_id]
        await show_main_menu(update, context)
        return

    # Handle main menu actions
    if user_input in ["üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–∏–π–æ–º —ó–∂—ñ", "üóëÔ∏è Delete a meal"]:
        await delete_meal_action(update, context)
        return

    if user_input in ["‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–π–æ–º —ó–∂—ñ", "‚ûï Add a meal"]:
        await add_meal_action(update, context)
        return

    if user_input in ["üìä –ü—ñ–¥—Å—É–º–æ–∫ –∑–∞ –¥–µ–Ω—å", "üìä Summary for today"]:
        today = date.today()
        entries = get_entries_for_period(today, today)
        if entries:
            summary_text = format_summary_table(entries, lang)
            await update.message.reply_text(summary_text, parse_mode="Markdown")
        else:
            await update.message.reply_text("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ –¥–µ–Ω—å. –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —ó–∂—É" if lang == "uk" else
                                            "No data. Add food first.")
        await show_main_menu(update, context)
        return

    # Handle ADD MEAL process
    if user_id in user_meal_stage:
        stage = user_meal_stage[user_id]

        if stage.get("awaiting_meal_type", True):
            if user_input in MEAL_CHOICES[lang]:
                user_meal_stage[user_id] = {"lang": lang, "meal": user_input, "awaiting_meal_type": False}
                await update.message.reply_text(
                    "üìù –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å, —â–æ –≤–∏ —ó–ª–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –≤—ñ–≤—Å—è–Ω–∫–∞ –≤ —Å—É—Ö–æ–º—É –≤–∏–≥–ª—è–¥—ñ 100–≥, –±–∞–Ω–∞–Ω 130–≥, –º–µ–¥ 20–≥):"
                    if lang == "uk"
                    else "üìù Now enter what you ate (e.g. oatmeal not cooked 100g, banana 130g, honey 20g):"
                )
                return
            else:
                available_choices = ", ".join(MEAL_CHOICES[lang])
                await update.message.reply_text(
                    f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–π–æ–º —ó–∂—ñ –∑ –∫–Ω–æ–ø–æ–∫: {available_choices}"
                    if lang == "uk"
                    else f"Please select a meal type from the buttons: {available_choices}"
                )
                return
        else:
            # User has entered food description
            selected_meal = stage["meal"]
            full_description = f"{selected_meal}: {user_input}"
            del user_meal_stage[user_id]

            try:
                kbju = estimate_kbju(full_description, lang)
                save_entry(full_description, kbju)

                response = (
                    f"{MESSAGES[lang]['saved']}:\n{full_description}\n\n"
                    f"{MESSAGES[lang]['calories']}: {kbju['calories']} –∫–∫–∞–ª\n"
                    f"{MESSAGES[lang]['protein']}: {kbju['protein']} –≥\n"
                    f"{MESSAGES[lang]['fat']}: {kbju['fat']} –≥\n"
                    f"{MESSAGES[lang]['carbs']}: {kbju['carbs']} –≥"
                )
                await update.message.reply_text(response)
            except Exception as e:
                await update.message.reply_text(
                    f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ –ö–ë–ñ–£: {str(e)}"
                    if lang == "uk"
                    else f"Error calculating calories: {str(e)}"
                )

            await show_main_menu(update, context)
            return

    # Handle DELETE MEAL process
    if user_id in user_delete_stage:
        delete_stage = user_delete_stage[user_id]

        if delete_stage.get("awaiting_meal_type", False):
            if user_input in MEAL_CHOICES[lang]:
                await show_meal_entries_for_delete(update, context, user_input)
                return
            else:
                available_choices = ", ".join(MEAL_CHOICES[lang])
                await update.message.reply_text(
                    f"–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–∏–π–æ–º—É —ó–∂—ñ: {available_choices}" if lang == "uk"
                    else f"Please select a meal type: {available_choices}"
                )
                return

        elif delete_stage.get("awaiting_entry_selection", False):
            if user_input.startswith("üóëÔ∏è"):
                try:
                    entry_num = int(user_input.split(".")[0].replace("üóëÔ∏è", "").strip())
                    entries = delete_stage["entries"]

                    if 1 <= entry_num <= len(entries):
                        selected_item = entries[entry_num - 1]
                        actual_index = selected_item["index"]

                        deleted_entry = delete_entry_by_index(actual_index)
                        if deleted_entry:
                            await update.message.reply_text(
                                f"‚úÖ –ó–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ:\n{deleted_entry['description']}" if lang == "uk"
                                else f"‚úÖ Entry deleted:\n{deleted_entry['description']}"
                            )
                        else:
                            await update.message.reply_text(
                                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É." if lang == "uk"
                                else "‚ùå Error deleting entry."
                            )
                    else:
                        await update.message.reply_text(
                            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å—É." if lang == "uk"
                            else "‚ùå Invalid entry number."
                        )

                except (ValueError, IndexError):
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–±–æ—Ä—É." if lang == "uk"
                        else "‚ùå Invalid selection format."
                    )

                del user_delete_stage[user_id]
                await show_main_menu(update, context)
                return

    # Handle summary commands
    if user_input.lower().startswith(MESSAGES[lang]["summary_command"]):
        try:
            start_date, end_date = utils.parse_summary_command(user_input, lang)
            summary = get_summary_for_period(start_date, end_date, lang)
            await update.message.reply_text(summary)
        except Exception as e:
            await update.message.reply_text(
                f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—ñ–¥—Å—É–º–∫—É: {str(e)}"
                if lang == "uk"
                else f"Error creating summary: {str(e)}"
            )
        return

    # Try to detect if input is a meal description
    try:
        if is_meal_description(user_input, lang):
            user_meal_stage[user_id] = {"lang": lang, "awaiting_meal_type": True}
            await add_meal_action(update, context)
            return
    except Exception as e:
        print(f"Error checking meal description: {e}")

    # Default help message
    await update.message.reply_text(
        "üîé –Ø —Ä–∞—Ö—É—é –ö–ë–ñ–í –¥–ª—è —ó–∂—ñ. –û–±–µ—Ä–∏ –ø—Ä–∏–π–æ–º —ó–∂—ñ, –Ω–∞–ø–∏—à–∏, —â–æ —Ç–∏ —ó–≤(-–ª–∞), "
        "–¥–ª—è —Ç–æ—á–Ω—ñ—à–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∫–∞–∑—É—é—á–∏ –≤–∞–≥—É —Ç–∞ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—É.\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\nüçΩ –≤—ñ–≤—Å—è–Ω–∫–∞ –≤ —Å–∏—Ä–æ–º—É –≤–∏–≥–ª—è–¥—ñ 100–≥, –±–∞–Ω–∞–Ω 130–≥, –º–µ–¥ 20–≥"
        if lang == "uk"
        else
        "üîé I calculate calories and macros for food. Choose meal type and write what you ate, "
        "including weight and preparation state.\nFor example:\nüçΩ raw oats 100g, banana 130g, honey 20g"
    )
    await show_main_menu(update, context)


if __name__ == '__main__':
    try:
        app = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("language", choose_language))

        app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞|üá¨üáß English"), set_language))

        app.add_handler(
            MessageHandler(filters.TEXT & filters.Regex("^‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–π–æ–º —ó–∂—ñ$|^‚ûï Add a meal$"), add_meal_action))

        app.add_handler(
            MessageHandler(filters.TEXT & filters.Regex("^üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É$|^üåê Change language$"), choose_language))

        app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$|^‚¨ÖÔ∏è Back$"), show_main_menu))

        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_meal))

        print("Bot started successfully!")
        app.run_polling()

    except Exception as e:
        print(f"Error starting bot: {e}")
        print("Check your .env file and make sure TELEGRAM_TOKEN is set correctly")
